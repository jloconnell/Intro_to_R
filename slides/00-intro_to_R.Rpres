An Introduction to data manipulation in R
============================
transition: none
css: custom.css
autosize: true

Jessica L. O'Connell

Download/Install materials from **https://github.com/jloconnell/Intro_to_R**

Learning Objectives
==============
* why program/ why use R
* how to use R
* code recipes

Learning Objectives
==============
* **why program/ why use R**
* how to use R
* code recipes

Why program?
==========
* get more done in less time and with less pain
* a record of your data steps
* extensible, learn over time
* repeatable
* open source: puts the knowledge of the science community at your finger tips
* creative: if you can imagine it, you can probably program it

Which programming language?
============
* The one your colleagues already use
* An open source language (not MatLab)
  - “free as in beer”: 
     + it costs nothing
  - “free as in speech”: 
     + the right to see how the software works
     + the right to redistribute and improve/contribute
* We'll learn R today, but it's similar to other programming languages (Python, JavaScript)

Why R?
============
* It's a fully-featured programming language with rich statistics functions
* It's open-source
* It has many geospatial and machine learning libraries
 - "Yes, there's an R package for that"

Programming has a learning curve
============
* slow to create the first script
* fast to use the script to repeat the steps
* our goal is to learn:
  - some programming basics
  - create some code recipes
* you won't learn everything now

More resources
===============
* Cran: https://cran.r-project.org/doc/manuals/r-release/R-intro.html
* Swirl: R package that teaches R basics through easy interactive learning
* Software Carpentry: https://swcarpentry.github.io/r-novice-inflammation/
* Data Carpentry: https://datacarpentry.org/R-ecology-lesson/index.html
* Hadley Wickham, R for Data Science: https://r4ds.had.co.nz/

Learning Objectives
==============
* why program/ why use R
* **how to use R**
* code recipes

Object-oriented programming basics
==============
* data are stored as objects
* data has types and structures
* functions: a set of steps to apply to data
* data can be read in from disk, manipulated via functions, and written out to disk
* plotting: data can be visualized, plots can be saved to disk
* for loops: quick repeating of steps
* scripts: a text file of computer instructions/ data steps

How to use R: some basics
======================
* R is a calculator

```{r}
2+2
2*4
```

How to use R: some basics
======================
* R is object-oriented
* tip: press Alt - (or Option - on Mac) to auto-insert **<-**
```{r}
x <- 2
x
y<- x+x
y
```

How to use R: some basics
======================
* R can also handle text and character data

```{r}
x <- "Hello World"
x
```

R data types: the type of variable
======================
* character
* numeric (real or decimal)
* integer
* logical
* dates/times
* some others

R data structures: the type of object
======================
- Vectors
- Matrices
- Data frames


Vectors
======================
*  Vectors are a column of data, only one data type allowed (atomic)

```{r}
x <- 1:10
x
class(x)
length(x)
```

Vectors
======================
*  Vectors are a column of data, only one data type allowed (atomic)

```{r}
y<-c("a","b", "c")
y
class(y)
length(y)
```

Matrices
======================
* Matrix: an atomic vector with dimensions: the number of rows and columns
 + still atomic (only one data type allowed)

```{r}
m <- matrix(nrow = 2, ncol = 2)
m
dim(m)
```

Matrices
======================
* Matrix: an atomic vector with dimensions: the number of rows and columns
 + still atomic (only one data type allowed)

```{r}
m <- matrix(c(4, 4, 4, 4,3,2),  nrow = 2,  ncol = 3)
m
dim(m)
```

Data frame
======================
* Data frame: the most common data type for tabular data
 + each column is atomic, but different columns can have different data types
 + each column has the same number of observations (rows)
 + each column has it's own name

```{r}
dat <- data.frame(id = letters[1:10], x = 1:10, y = 11:20)
head(dat)
```

Data frame
======================
* see the data type, and dimensions (rows, columns), and the column names

```{r}
data(iris)
class(iris)
dim(iris)
names(iris)
```

Data frame
======================
* the first few rows with **head( )** and and the last few with **tail( )**

```{r}
head(iris)
tail(iris)
```


Data frame
======================
* see the structure of all the data with **str( )**
* cross tabulate one column with table

```{r}
str(iris)
table(iris$Species)
```

Data frame
======================
* see a summary of all the data with **summary( )**

```{r}
summary(iris)
```

Subsetting vectors
============
* Vectors are indexed with **[ ]**
  + the number is the item position, starting from the right

```{r}
 y<-c("a","b", "c")
y[1]
y[c(1,3)]
```

Subsetting vectors
===========
 * Vectors are indexed with **[ ]**
   + a negative index will show all **but** that item

```{r}
y<-c("a","b", "c")
y
y[-2]
```

Subsetting vectors
=============
* Vectors are indexed with **[ ]**
    + a conditional index will grab values that meet a criteria

```{r}
x<-1:10
x
x[x<=7]
x[x==7]
```

Subsetting vectors
=============
* What if I want just **less than**, instead of **less than or equal**?

Subsetting data
=============
* What if I want just **less than**, instead of **less than or equal**?

```{r}
x[x<7]
```

Subsetting vectors
=============
* What if I want to see the last item in the vector?

Subsetting vectors
=============
* What if I want just the last item in the vector?

```{r}
length(x)
x[length(x)]
```

Subsetting data frames and matrices
============
* Data frames and matrices are indexed by **row**, **column** inside [ ]

```{r}
dat <- data.frame(id = letters[1:10], x = 1:10, y = 11:20)
head(dat)

#row 1, column 2
dat[1,2]

```

Subsetting data frames and matrices
============
* What if I want the first 5 rows in column 2?
* What about all the rows in column 2?

```{r}
#first 5 rows, column 2
dat[1:5,2]

##all the rows, column2
dat[ ,2]
```

Subsetting data frames and matrices
============
* You can also grab rows based on a condition

```{r}

##rows where x >5, column3
dat[ dat$x>7, 2]
```

Subsetting data frames and matrices
============
* What if I want all the rows in column 1 ("id") where x is greater than 8?

```{r}
##rows where x >8, column 1
dat[dat$x>8, 1]
```

Subsetting data frames and matrices
============
* selectively replace rows in y where x meets a criteria

```{r}
##selectively replace rows where x >7 in  column3 with 100
dat[ dat$x>7, 3]<-100
tail(dat)
```

Subsetting data frames
============
* Data frames can also be subset by column name, with $

```{r}
dat <- data.frame(id = letters[1:10], x = 1:10, y = 11:20)
dat$y
dat[ , "y"]
```

Combining data: Vectors
======================
* c( ), for "combine" or "concatenate"

```{r}
x <- 1:3
y<-c(5,6,7)
z<- c(x,y)
z
```

Combining data: data frames and matrices
======================
* append a row: **rbind( )**, append a column: **cbind( )**

```{r}
m <- matrix(c(4, 4, 4, 4),
  nrow = 2,
  ncol = 2)
m
y<-c(2,2)
m<-rbind(m,y)
m
```

Combining data: data frames
======================
* add a new named column

```{r}
dat <- data.frame(plot = letters[1:3], band1 = rnorm(n=3, mean=0.1, sd=0.05), band2 = rnorm(n=3, mean=0.2, sd=0.06))
head(dat)
z<-rnorm(n=3, mean=0.15, sd=0.03); z
dat$band3 <- z
head(dat)
```

Combining data: data frames
======================
* how do I create a new column as a mathmatic combo of other columns?

Combining data: data frames
======================
* how do I create a new column as a mathmatic combo of other columns?

```{r}
dat$sr<-(dat$band2)/(dat$band3)
head(dat)
```



Combining data: data frames
======================
* merge two data frames via a common column

```{r}
dat <- data.frame(date = seq.Date(from=as.Date("2019-01-01"), 
                                  to=as.Date("2019-01-10"), by=2),  
                  x = 1:5, y = 11:15)
dat2<-data.frame(date = seq.Date(from=as.Date("2019-01-01"), 
                                 to=as.Date("2019-01-05"), by=1),  
                 z = seq(from=5, to=10, length.out=5))
head(dat)
head(dat2)
```

Combining data: data frames
======================
* merge two data frames via a common column

```{r}
dat<-merge(dat, dat2, by="date", all.x=T, all.y=T)
head(dat)
```

Plotting data
===============

```{r, fig.height=5, fig.width=5}
plot(iris$Sepal.Length[iris$Species=="setosa"], 
     iris$Sepal.Width[iris$Species=="setosa"], pch=19,
     xlab= "Sepal Length (mm)", ylab= "Sepal Width (mm)", col="red")
```


Plotting data: add more points
===============
```{r, fig.height=5, fig.width=5}
plot(iris$Sepal.Length[iris$Species=="setosa"], 
     iris$Sepal.Width[iris$Species=="setosa"], pch=19,
     xlab= "Sepal Length (mm)", ylab= "Sepal Width (mm)", col="red")
points( iris$Sepal.Length[iris$Species=="versicolor"], pch=1,  
        iris$Sepal.Width[iris$Species=="versicolor"], col="blue")
```

Plotting data: adjust the plot
===============
* how can we use **summary( )** to figure out what the axis limits should be?

```{r, echo=F, fig.height=5, fig.width=5}
plot(iris$Sepal.Length[iris$Species=="setosa"], 
     iris$Sepal.Width[iris$Species=="setosa"], pch=19,
     xlab= "Sepal Length (mm)", ylab= "Sepal Width (mm)", col="red")
points( iris$Sepal.Length[iris$Species=="versicolor"], pch=1,  
        iris$Sepal.Width[iris$Species=="versicolor"], col="blue")
```

Plotting data: adjust the plot
===============
* how can we use **summary( )** to figure out what the axis limits should be?

```{r, echo=F}
summary(iris)
```

Plotting data: adjust the plot
===============
```{r, fig.height=5, fig.width=5}
plot(iris$Sepal.Length[iris$Species=="setosa"], 
     iris$Sepal.Width[iris$Species=="setosa"],  pch=19,
     xlab= "Sepal Length (mm)", ylab= "Sepal Width (mm)", col="red",
     xlim=c(4.3,7.9), ylim=c(2,4.4))
points( iris$Sepal.Length[iris$Species=="versicolor"], pch=1,  
        iris$Sepal.Width[iris$Species=="versicolor"], col="blue")
```

Plotting data: adjust the plot
===============
* There's a third species. How can find out what it is and add it to the plot?
* Hint: try summary(iris), table(iris$Species), or levels(iris$Species)

```{r, echo=F, fig.height=5, fig.width=5}
plot(iris$Sepal.Length[iris$Species=="setosa"], 
     iris$Sepal.Width[iris$Species=="setosa"],  pch=19,
     xlab= "Sepal Length (mm)", ylab= "Sepal Width (mm)", col="red",
     xlim=c(4.3,7.9), ylim=c(2,4.4))
points( iris$Sepal.Length[iris$Species=="versicolor"], pch=1,  
        iris$Sepal.Width[iris$Species=="versicolor"], col="blue")
```

Plotting data: add the third species
===============

```{r, fig.height=5, fig.width=5}
plot(iris$Sepal.Length[iris$Species=="setosa"], 
     iris$Sepal.Width[iris$Species=="setosa"],  pch=19,
     xlab= "Sepal Length (mm)", ylab= "Sepal Width (mm)", col="red",
     xlim=c(4.3,7.9), ylim=c(2,4.4))
points( iris$Sepal.Length[iris$Species=="versicolor"], pch=1,  
        iris$Sepal.Width[iris$Species=="versicolor"], col="blue")
points( iris$Sepal.Length[iris$Species=="virginica"], pch=3,  
        iris$Sepal.Width[iris$Species=="virginica"], col="green")

```
  
